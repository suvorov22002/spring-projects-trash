/*
 * Smobilpay S3P API
 * Smobilpay Third Party API FOR PAYMENT COLLECTIONS
 *
 * OpenAPI spec version: 3.0.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.afriland.afbpaypartnerservices.models;

import java.io.IOException;
import java.util.Date;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.MappedSuperclass;
import javax.persistence.Transient;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import io.swagger.v3.oas.annotations.media.Schema;
import lombok.ToString;
/**
 * CollectionResponse
 */
@ToString
@MappedSuperclass
//@JsonIgnoreProperties({"timestamp", "agentBalance", "receiptNumber", "priceSystemCur", "priceLocalCur", "localCur", "systemCur"})
public class CollectionResponse {
	
  @SerializedName("ptn")
  @Column
  private String ptn = null;

  @SerializedName("timestamp")
  @Transient
  private Date timestamp = null;

  @SerializedName("agentBalance")
  @Column
  private Float agentBalance = null;

  @SerializedName("receiptNumber")
  @Column
  private String receiptNumber = null;

  @SerializedName("veriCode")
  @Column
  private String veriCode = null;

  @SerializedName("priceLocalCur")
  @Column
  private Float priceLocalCur = null;

  @SerializedName("priceSystemCur")
  @Column
  private Float priceSystemCur = null;

  @SerializedName("localCur")
  @Column
  private String localCur = null;

  @SerializedName("systemCur")
  @Column
  private String systemCur = null;

  @SerializedName("trid")
  @Column
  private String trid = null;

  @SerializedName("pin")
  @Column
  private String pin = null;
    

  /**
   * payment processing status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    REVERSED("REVERSED"),
    PENDING("PENDING"),
    ERRORED("ERRORED"),
    UNDERINVESTIGATION("UNDERINVESTIGATION"),
    SUCCESS("SUCCESS"),
	INVALID("INVALID");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        return StatusEnum.fromValue(jsonReader.nextString());
      }
    }
  }  
  
  @SerializedName("status")
  @Enumerated(EnumType.STRING)
  @Column
  private StatusEnum status = null;

  @SerializedName("payItemId")
  @Column
  private String payItemId = null;

  @SerializedName("payItemDescr")
  @Column
  private String payItemDescr = null;

  public CollectionResponse ptn(String ptn) {
    this.ptn = ptn;
    return this;
  }

   /**
   * Unique payment collection transaction number
   * @return ptn
  **/
  @Schema(required = true, description = "Unique payment collection transaction number")
  public String getPtn() {
    return ptn;
  }

  public void setPtn(String ptn) {
    this.ptn = ptn;
  }

  public CollectionResponse timestamp(Date timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Timestamp of processing in  System (ISO 8601)
   * @return timestamp
  **/
  public Date getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(Date timestamp) {
    this.timestamp = timestamp;
  }

  public CollectionResponse agentBalance(Float agentBalance) {
    this.agentBalance = agentBalance;
    return this;
  }

   /**
   * Current Balance of agent account AFTER collection in system currency
   * @return agentBalance
  **/
  @Schema(required = true, description = "Current Balance of agent account AFTER collection in system currency")
  public Float getAgentBalance() {
    return agentBalance;
  }

  public void setAgentBalance(Float agentBalance) {
    this.agentBalance = agentBalance;
  }

  public CollectionResponse receiptNumber(String receiptNumber) {
    this.receiptNumber = receiptNumber;
    return this;
  }

   /**
   * Receipt number - alternative identifier of payment - bound to agent context and is NOT unique
   * @return receiptNumber
  **/
  @Schema(required = true, description = "Receipt number - alternative identifier of payment - bound to agent context and is NOT unique")
  public String getReceiptNumber() {
    return receiptNumber;
  }

  public void setReceiptNumber(String receiptNumber) {
    this.receiptNumber = receiptNumber;
  }

  public CollectionResponse veriCode(String veriCode) {
    this.veriCode = veriCode;
    return this;
  }

   /**
   * Verification code for receipt number
   * @return veriCode
  **/
  @Schema(required = true, description = "Verification code for receipt number")
  public String getVeriCode() {
    return veriCode;
  }

  public void setVeriCode(String veriCode) {
    this.veriCode = veriCode;
  }

  public CollectionResponse priceLocalCur(Float priceLocalCur) {
    this.priceLocalCur = priceLocalCur;
    return this;
  }

   /**
   * Price paid in local currency
   * @return priceLocalCur
  **/
  @Schema(required = true, description = "Price paid in local currency")
  public Float getPriceLocalCur() {
    return priceLocalCur;
  }

  public void setPriceLocalCur(Float priceLocalCur) {
    this.priceLocalCur = priceLocalCur;
  }

  public CollectionResponse priceSystemCur(Float priceSystemCur) {
    this.priceSystemCur = priceSystemCur;
    return this;
  }

   /**
   * Price paid in system currency
   * @return priceSystemCur
  **/
  @Schema(required = true, description = "Price paid in system currency")
  public Float getPriceSystemCur() {
    return priceSystemCur;
  }

  public void setPriceSystemCur(Float priceSystemCur) {
    this.priceSystemCur = priceSystemCur;
  }

  public CollectionResponse localCur(String localCur) {
    this.localCur = localCur;
    return this;
  }

   /**
   * Local currency of service. (Format: ISO 4217)
   * @return localCur
  **/
  @Schema(required = true, description = "Local currency of service. (Format: ISO 4217)")
  public String getLocalCur() {
    return localCur;
  }

  public void setLocalCur(String localCur) {
    this.localCur = localCur;
  }

  public CollectionResponse systemCur(String systemCur) {
    this.systemCur = systemCur;
    return this;
  }

   /**
   * Currency of billing by  system (Format: ISO 4217)
   * @return systemCur
  **/
  @Schema(required = true, description = "Currency of billing by  system (Format: ISO 4217)")
  public String getSystemCur() {
    return systemCur;
  }

  public void setSystemCur(String systemCur) {
    this.systemCur = systemCur;
  }

  public CollectionResponse trid(String trid) {
    this.trid = trid;
    return this;
  }

   /**
   * custom external transaction reference provided during payment collection
   * @return trid
  **/
  @Schema(description = "custom external transaction reference provided during payment collection")
  public String getTrid() {
    return trid;
  }

  public void setTrid(String trid) {
    this.trid = trid;
  }

  public CollectionResponse pin(String pin) {
    this.pin = pin;
    return this;
  }

   /**
   * Only for VOUCHER services - field returning a PIN or digital code. Will return “null” otherwise.
   * @return pin
  **/
  @Schema(description = "Only for VOUCHER services - field returning a PIN or digital code. Will return “null” otherwise.")
  public String getPin() {
    return pin;
  }

  public void setPin(String pin) {
    this.pin = pin;
  }

  public CollectionResponse status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * payment processing status
   * @return status
  **/
  @Schema(required = true, description = "payment processing status")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public CollectionResponse payItemId(String payItemId) {
    this.payItemId = payItemId;
    return this;
  }

   /**
   * Unique  Payment Item ID for payment item identification
   * @return payItemId
  **/
  @Schema(description = "Unique  Payment Item ID for payment item identification")
  public String getPayItemId() {
    return payItemId;
  }

  public void setPayItemId(String payItemId) {
    this.payItemId = payItemId;
  }

  public CollectionResponse payItemDescr(String payItemDescr) {
    this.payItemDescr = payItemDescr;
    return this;
  }

   /**
   * Contains optional description about payment details (e.g. operator provided bill types)
   * @return payItemDescr
  **/
  @Schema(description = "Contains optional description about payment details (e.g. operator provided bill types)")
  public String getPayItemDescr() {
    return payItemDescr;
  }

  public void setPayItemDescr(String payItemDescr) {
    this.payItemDescr = payItemDescr;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CollectionResponse collectionResponse = (CollectionResponse) o;
    return Objects.equals(this.ptn, collectionResponse.ptn) &&
        Objects.equals(this.timestamp, collectionResponse.timestamp) &&
        Objects.equals(this.agentBalance, collectionResponse.agentBalance) &&
        Objects.equals(this.receiptNumber, collectionResponse.receiptNumber) &&
        Objects.equals(this.veriCode, collectionResponse.veriCode) &&
        Objects.equals(this.priceLocalCur, collectionResponse.priceLocalCur) &&
        Objects.equals(this.priceSystemCur, collectionResponse.priceSystemCur) &&
        Objects.equals(this.localCur, collectionResponse.localCur) &&
        Objects.equals(this.systemCur, collectionResponse.systemCur) &&
        Objects.equals(this.trid, collectionResponse.trid) &&
        Objects.equals(this.pin, collectionResponse.pin) &&
        Objects.equals(this.status, collectionResponse.status) &&
        Objects.equals(this.payItemId, collectionResponse.payItemId) &&
        Objects.equals(this.payItemDescr, collectionResponse.payItemDescr);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ptn, timestamp, agentBalance, receiptNumber, veriCode, priceLocalCur, priceSystemCur, localCur, systemCur, trid, pin, status, payItemId, payItemDescr);
  }



}
